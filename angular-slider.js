// Generated by CoffeeScript 1.6.2
var BUTTON_EL, MODULE, SLIDER, SLIDER_BUTTON, module, sliderButtonDirective, sliderDirective;

MODULE = 'ngSlider';

SLIDER = 'slider';

SLIDER_BUTTON = 'sliderButton';

BUTTON_EL = 'slider-button';

sliderDirective = function() {
  return {
    restrict: 'E',
    template: "<" + SLIDER_BUTTON + "></" + SLIDER_BUTTON + ">",
    link: function(scope, slider, attr) {
      return slider.find(SLIDER_BUTTON).attr('ng-model', attr.ngModel);
    }
  };
};

sliderButtonDirective = function() {
  return {
    restrict: 'E',
    link: function(scope, button, attr) {
      var XRange, bar, body, buttonWidth, fallbackVal, fitToStep, maxVal, maxX, minVal, minX, model, mouseEventHandler, moveSliderButton, offsetSubtract, step, translateValToX, translateXToVal, valRange;

      body = bar = button.parent();
      while (body.tagName !== 'BODY') {
        body = body.parent();
      }
      model = attr.ngModel;
      minVal = parseInt(bar.attr('min'));
      maxVal = parseInt(bar.attr('max'));
      valRange = maxVal - minVal;
      step = parseInt(bar.attr('step'));
      fallbackVal = parseInt(bar.attr('value-if-null'));
      buttonWidth = button[0].clientWidth;
      offsetSubtract = bar[0].offsetLeft;
      minX = 0;
      maxX = bar[0].clientWidth - button[0].clientWidth;
      XRange = maxX - minX;
      translateValToX = function(val) {
        var XVal, normVal;

        normVal = (val - minVal) / valRange;
        XVal = normVal * XRange;
        return XVal;
      };
      translateXToVal = function(XVal) {
        var normX, val;

        normX = (XVal - minX) / XRange;
        val = normX * valRange;
        return Math.round(val);
      };
      fitToStep = function(val) {
        var newVal, rem;

        rem = val % step;
        newVal = rem > s / 2 ? val + (r - s) : val - r;
        return newVal;
      };
      moveSliderButton = function(newXVal) {
        newXVal = Math.max(newXVal, minX);
        newXVal = Math.min(newXVal, maxX);
        button.css({
          left: "" + newXVal + "px"
        });
        return scope.$apply(function() {
          return scope[model] = fitToStep(translateXToVal(newXVal));
        });
      };
      mouseEventHandler = function(mouseEvent) {
        var XVal;

        XVal = mouseEvent.clientX - offsetSubtract;
        return moveSliderButton(XVal);
      };
      bar.bind('click', mouseEventHandler);
      bar.bind('mousedown', function() {
        body.bind('mousemove', mouseEventHandler);
        return body.bind('mouseup', function() {
          return body.unbind('mousemove mouseup');
        });
      });
      return scope.$watch(model, function(newVal, oldVal) {
        return moveSliderButton(translateValToX(parseInt(newVal)));
      });
    }
  };
};

module = function(window, angular) {
  return angular.module(MODULE, ['ng']).directive(SLIDER, sliderDirective).directive(SLIDER_BUTTON, sliderButtonDirective);
};

module(window, window.angular);
