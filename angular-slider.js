// Generated by CoffeeScript 1.6.2
var BUTTON_EL, MODULE, SLIDER, SLIDER_BUTTON, module, sliderButtonDirective, sliderDirective;

MODULE = 'ngSlider';

SLIDER = 'slider';

SLIDER_BUTTON = 'sliderButton';

BUTTON_EL = 'slider-button';

sliderDirective = function() {
  return {
    restrict: 'E',
    scope: {
      value: '=ngModel'
    },
    template: "<" + BUTTON_EL + " ng-model=\"value\"></" + BUTTON_EL + ">"
  };
};

sliderButtonDirective = function() {
  return {
    restrict: 'E',
    link: function(scope, button) {
      var XRange, bar, body, buttonWidth, fallbackVal, fitToStep, maxVal, maxX, minVal, minX, mouseEventHandler, moveSliderButton, offsetSubtract, setValue, step, translateValToX, translateXToVal, valRange;

      body = bar = button.parent();
      while (body[0].tagName !== 'BODY') {
        body = body.parent();
      }
      minVal = parseInt(bar.attr('min'));
      maxVal = parseInt(bar.attr('max'));
      valRange = maxVal - minVal;
      step = parseInt(bar.attr('step'));
      fallbackVal = parseInt(bar.attr('value-if-null'));
      buttonWidth = button[0].clientWidth;
      offsetSubtract = bar[0].offsetLeft;
      minX = 0;
      maxX = bar[0].clientWidth - button[0].clientWidth;
      XRange = maxX - minX;
      translateValToX = function(val) {
        var XVal, normVal;

        normVal = (val - minVal) / valRange;
        XVal = normVal * XRange;
        return XVal;
      };
      translateXToVal = function(XVal) {
        var normX, val;

        normX = (XVal - minX) / XRange;
        val = normX * valRange;
        return Math.round(val + minVal);
      };
      fitToStep = function(val) {
        var newVal, rem;

        rem = val % step;
        newVal = rem > step / 2 ? val + (step - rem) : val - rem;
        return newVal;
      };
      setValue = function(value) {
        return scope.$apply(function() {
          return scope.value = value;
        });
      };
      moveSliderButton = function(newXVal) {
        var newVal;

        newXVal = Math.max(newXVal, minX);
        newXVal = Math.min(newXVal, maxX);
        button.css({
          left: "" + newXVal + "px"
        });
        newVal = fitToStep(translateXToVal(newXVal));
        return newVal;
      };
      mouseEventHandler = function(mouseEvent) {
        var XVal, newVal;

        XVal = mouseEvent.clientX - offsetSubtract;
        newVal = moveSliderButton(XVal);
        return setValue(newVal);
      };
      scope.value = moveSliderButton(translateValToX(scope.value));
      bar.bind('click', mouseEventHandler);
      return bar.bind('mousedown', function() {
        body.bind('mousemove', mouseEventHandler);
        return body.bind('mouseup', function() {
          body.unbind('mousemove');
          return body.unbind('mouseup');
        });
      });
    }
  };
};

module = function(window, angular) {
  return angular.module(MODULE, ['ng']).directive(SLIDER, sliderDirective).directive(SLIDER_BUTTON, sliderButtonDirective);
};

module(window, window.angular);
